const useState = React.useState;
const useEffect = React.useEffect;
const useRef = React.useRef;

const iconStyle = {
  cursor: "pointer",
};

const audioSrc =
  "https://s3-us-west-1.amazonaws.com/benjaminadk/Data+synth+beep+high+and+sweet.mp3";

function App() {
const [sessionLength, setSessionLength] = React.useState(25);
    const [breakLength, setBreakLength] = React.useState(5);
    const [display, setDisplay] = React.useState(25 * 60);
    const [intervalID, setIntervalID] = React.useState("");
    const [timerOn, setTimerOn] = React.useState(false);
    const [isSession, setIsSession] = React.useState(true);
    const player = React.useRef();
    
    React.useEffect(() => {
        if (display === 0 && isSession){
            setIsSession(false);
            breakSound();
            setDisplay(breakLength * 60);
        }
        else if (display === 0 && !isSession){
            setIsSession(true);
            breakSound();
            setDisplay(sessionLength * 60);
        }
    }, [display, isSession])
    
    const formatDisplayTime = (time) => {
        let min = Math.floor(time / 60);
        let sec = time % 60;
        return (
            (min < 10 ? "0" + min : min) + ":" + (sec < 10 ? "0" + sec : sec)
        )
    }

    const updateTime = (inc, type) => {
        if (type == "break") {
            if (breakLength > 1 && breakLength < 60){
                setBreakLength(prev => prev + (inc? 1: -1));
            }
        }
        if (type == "session") {
            if (sessionLength > 1  && sessionLength < 60){
            setSessionLength(prev => prev + (inc? 1: -1)); 
            setDisplay(display => display + (inc? 60: -60));
            }
        }
    }

    const timeControl = () => {
        if (!timerOn) {
            setTimerOn(true);
            let interval = setInterval(() => {
                setDisplay( prev => prev - 1 )
            }, 1000);
            setIntervalID(interval);
        }
        else {
            clearInterval(intervalID);
        }
        setTimerOn(!timerOn)
    }

    const breakSound = () => {
        player.current.currentTime = 0;
        player.current.play();
    }

    const resetTime = () => {
        setSessionLength(25);
        setBreakLength(5);
        setDisplay(25 * 60);
        setTimerOn(false);
        setIsSession(true);
        clearInterval(intervalID);
        player.current.currentTime = 0;
        player.current.pause();
    }

  return (
    <div className="container App">
      <div className="row">
        <h1 className="title display-3 mb-5 col-md-12 text-center">
          Pomodoro Clock
        </h1>
      </div>

      <div className="row double d-flex">
                <Length 
                title="Session length" 
                updateTime={updateTime}
                type="session"
                value={sessionLength}
            />
            <Length
                title="Break length"
                updateTime={updateTime}
                type="break"
                value={breakLength}
            />
      </div>
      
      <div className="row">
        <div className="clock col-md-12 d-flex justify-content-center">
          <div className={timerOn ? "box-active mt-5" : "null mt-5"}>
            <span className={timerOn ? null : "box2"}></span>
            <h2 className="text-center display-4" id="timer-label">
              {isSession ? "Let's work!" : "Breaktime"}
            </h2>
            <h1 className="timer display-1 text-center" id="time-left">
              {formatDisplayTime(display)}
            </h1>
          </div>
        </div>
        <div className="col-md-12">
          <div className="buttons d-flex justify-content-center align-content-center m-3">
            <span id="start_stop" onClick={timeControl}>
              {timerOn ? (
                <i className="fas fa-pause fa-4x m-3" style={iconStyle}></i>
              ) : (
                <i
                  className="fas fa-play fa-4x m-3"
                  style={iconStyle}
                  id="start_stop"
                ></i>
              )}
            </span>
            <i
              className="fas fa-sync-alt fa-4x m-3"
              style={iconStyle}
              id="reset"
              onClick={resetTime}
            ></i>
          </div>
        </div>
      </div>
      <audio 
                id='beep'
                src={audioSrc}
                ref= {player}
                type="audio"
                />
    </div>
  );
}

function Length({
  title,
  updateTime,
  type,
  value
}) {
  return (
    <div className="col-md-6">
      <h1
        className="text-center"
        id={`${type}-label`}
      >
        {title}
      </h1>
     <div className="d-flex justify-content-center align-items-center">
        <div className="arrow">
          <i
            className="fas fa-arrow-circle-down fa-4x"
            id={`${type}-decrement`}
            style={iconStyle}
            onClick={() => updateTime(false, type)}
          ></i>
        
        </div>
        <h3
          className="m-5 display-4"
          id={`${type}-length`}
        >
          {value}
        </h3>
        <div className="arrow">
          <i
            className="fas fa-arrow-circle-up fa-4x"
             id={`${type}-increment`}
            style={iconStyle}
            onClick={() => updateTime(true,type)}
          ></i>
         
        </div>
      </div>
    </div>
  );
}

ReactDOM.render(<App />, document.getElementById("app"));
